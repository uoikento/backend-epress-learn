{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","Notification","message","useEffect","noteService","initialNotes","notesToShow","filter","map","i","pushId","find","n","changedNote","returnedNote","catch","error","setTimeout","console","log","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,YAAc,WAElB,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCRpCK,EAAU,4DAmBD,EAjBA,WAEb,OADmBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GACrB,OAAOA,EAASC,SAcL,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCZrCK,G,MAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,4GAoHSC,EA/GH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,uBAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMVC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAK7B,UAAU,QAAf,SACG6B,KAOPC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJX,EAASW,QAEZ,IAKH,IA4CMC,EAAcT,EAChBJ,EACAA,EAAMc,QAAO,SAAAtC,GAAI,OAAuB,IAAnBA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC6B,EAAD,CAAcC,QAASH,IACvB,8BACE,yBAAQxB,QAAS,kBAAMuB,GAAYD,IAAnC,kBACQA,EAAU,iCAAU,oBAG9B,6BAEGS,EAAYE,KAAI,SAACvC,EAAMwC,GAAP,OACf,cAAC,EAAD,CAEExC,KAAMA,EACNC,iBAAmB,kBA/CF,SAACwC,GAC1B,IAAMzC,EAAOwB,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAO0B,KAChCG,EAAW,2BAAQ5C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDgC,EACQM,EAAQG,GACflC,MAAK,SAAAmC,GACJpB,EAASD,EAAMe,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAO0B,EAASzC,EAAO6C,SAExDC,OAAM,SAAAC,GACLhB,EAAgB,SAAD,OACJ/B,EAAKK,QADD,sCAGf2C,YAAW,WACTjB,EAAgB,QACf,KACHN,EAASD,EAAMc,QAAO,SAAAK,GAAC,OAAIA,EAAE5B,KAAO0B,SAEtCQ,QAAQC,IAAI,WAAQT,EAAS,gEA6BIU,CAAmBnD,EAAKe,MAF5CyB,QAOX,uBAAMY,SApEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBlD,QAASqB,EACT8B,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAE7BzB,EACUoB,GACP7C,MAAK,SAAAmC,GACJpB,EAASD,EAAMqC,OAAOhB,IACtBlB,EAAW,QAyDb,UACE,uBACEmC,MAAOpC,EACPqC,SAhCiB,SAACV,GACxBJ,QAAQC,IAAIG,EAAMW,OAAOF,OACzBnC,EAAW0B,EAAMW,OAAOF,UAgCpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,QCzHNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.77d21f6d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'do false!' : 'do true!'\n  \n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = 'https://whispering-woodland-45640.herokuapp.com/api/notes'\n\nconst getAll = () => {\n  const getRequest = axios.get(baseUrl)\n  return getRequest.then(response => {\n    return response.data\n  })\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport './index.css'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened')\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n  \n\n// dbからデータを取得する\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  // console.log('render', notes.length, 'notes')\n\n// ノートを追加して、dbにpostする\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n// importanceの値を切り替える\n  const toggleImportanceOf = (pushId) => {\n    const note = notes.find(n => n.id === pushId)\n    const changedNote = { ...note, important: !note.important }\n    \n    noteService\n    .update(pushId, changedNote)\n    .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== pushId ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== pushId))\n    })\n    console.log('idが' + pushId + 'の重要度を変えるで〜')\n  }\n  \n  \n// form中身の変更内容を取得\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? '重要なやつ' : '全部' }\n        </button>\n      </div>\n      <ul>\n        {/* notesToShowを実行 */}\n        {notesToShow.map((note, i) => \n          <Note\n            key={i}\n            note={note}\n            toggleImportance= {() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      {/* submitをクリックするとaddNoteを実行する */}\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App \n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}